Shader "Chameleon/#SCRIPTNAME#"{
	Properties{
		[MainTexture] matTexture("Texture",2D) = "white"{}
		[MainColor] matColor("Color",Color) = (1,1,1,1)
		[MatRange] matSmoothness("Smoothness",Range(0,1)) = 0.5
		matKd("Diffuse Coeff",float) = 0.9
		matKs("Specular Coeff",float) = 0.1
	}
	SubShader{
		LOD 300
		Pass{
			Name "Main"
			Tags{"LightMode"="UniversalForward"}

			HLSLPROGRAM
			#pragma vertex vertexShader
			#pragma fragment fragmentShader
			#include "Packages/com.chameleonplayground.usefulscripts/UsefulScripts/chm_ShaderHelper.hlsl"

			struct VertToFrag{
				float4 clipPos : SV_POSITION;
				half3 worldNormal : NORMAL;
				float3 worldPos : TEXCOORD1;
				float2 uv : TEXCOORD0;
			};
			
			half4 matColor;
			sampler2D matTexture;
			float4 matTexture_ST;
			float matSmoothness;
			float matKd;
			float matKs;

			VertToFrag vertexShader(
				float4 objectPos : POSITION,
				float3 objectNormal : NORMAL,
				float2 uv : TEXCOORD0
			){
				VertToFrag v2f = (VertToFrag)0;
				v2f.worldPos = TransformObjectToWorld(objectPos.xyz);
				v2f.worldNormal = TransformObjectToWorldNormal(objectNormal);
				v2f.clipPos = TransformWorldToHClip(v2f.worldPos);
				v2f.uv = uv*matTexture_ST.xy + matTexture_ST.zw;
				return v2f;
			}

			half4 fragmentShader(
				VertToFrag v2f
			) : SV_TARGET
			{
				float3 pixelWorldNormal = normalize(v2f.worldNormal);
				return half4(
					simpleLitColor(
						tex2D(matTexture,v2f.uv).xyz * matColor.xyz,
						v2f.worldPos,
						pixelWorldNormal,
						matKd,
						matKs,
						exp2(1+10*matSmoothness)
					)
				,1);
			}	
			ENDHLSL
		}
		
		//UsePass for this pass:
		//UsePass "chm_Template/CustomLitShader/SHADOWCASTER"
		/* This pass is actually run as a prepass, and BEFORE "UniversalForward" pass
		(Credit: bgolus, UF). It allows your material to cast shadow ONTO other materials.
		Note that the part about RECEIVING shadow is implemented in "UniversalForward"
		pass. */
		Pass{
			Name "ShadowCaster"
			Tags{"LightMode" = "ShadowCaster"}
			
			HLSLPROGRAM
			#pragma vertex vertexShader
			#pragma fragment fragmentShader
			#include "UnityCG.cginc"

			float4 vertexShader(
				float4 objectPos : POSITION
			) : SV_POSITION
			{
				return UnityObjectToClipPos(objectPos);
			}
			half4 fragmentShader() : SV_TARGET{
				return 0;
			}
			ENDHLSL
		}

		//UsePass for this pass:
		//UsePass "chm_Template/CustomLitShader/DEPTHONLY"
		/* This pass allows YOUR material to write to _CameraDepthTexture. If you
		don't use this pass, your material will not write to it and other materials
		that rely on comparing z-buffer will fail with your material. For example,
		transparent material will not see your material and fog will not work with
		your material. */
		Pass{
			Name "DepthOnly"
			Tags{"LightMode" = "DepthOnly"}
			
			HLSLPROGRAM
			#pragma vertex vertexShader
			#pragma fragment fragmentShader
			#include "UnityCG.cginc"

			float4 vertexShader(
				float4 objectPos : POSITION
			) : SV_POSITION
			{
				return UnityObjectToClipPos(objectPos);
			}
			half4 fragmentShader() : SV_TARGET{
				return 0;
			}
			ENDHLSL
		}
	}
}
